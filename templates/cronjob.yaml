---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "etcd-defrag.fullname" . }}
  labels:
    {{- include "etcd-defrag.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.schedule | quote }}
  timeZone: {{ .Values.timezone }}
  startingDeadlineSeconds: {{ .Values.startingDeadlineSeconds }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: {{ .Values.backoffLimit }}
      activeDeadlineSeconds: {{ .Values.activeDeadlineSeconds }}
      template:
        spec:
          nodeSelector:
            node-role.kubernetes.io/control-plane: ""
          tolerations:
            - key: "node-role.kubernetes.io/control-plane"
              operator: "Exists"
              effect: "NoSchedule"
          securityContext:
            runAsUser: 0
          restartPolicy: Never
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets: {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - name: {{ .Chart.Name }}
              image: {{ printf "%s:%s" .Values.image.repository  .Values.image.tag }}
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                - name: NODE_IP
                  valueFrom:
                    fieldRef:
                      fieldPath: status.hostIP
              command: ['/bin/bash']
              args:
                - -c
                - |
                  TRIES={{ .Values.healthCheckAttempts }}
                  ETCDCTL_API=3
                  ETCDCTL='etcdctl --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key'
                  # discover the list of etcd members in a form we can use
                  ENDPOINTS=$($ETCDCTL --endpoints=${NODE_IP}:2379 member list | awk -F ',' '{gsub(/[[:blank:]]/,"",$5);printf("%s ", $5)}' | xargs | sed 's/ /,/g')
                  $ETCDCTL --endpoints=${ENDPOINTS} -w table endpoint status
                  # if any are unhealthy cowardly bail out
                  if ($ETCDCTL --endpoints=${ENDPOINTS} endpoint health 2>&1 | grep -v 'is healthy:')
                  then
                    echo "FAILED! etcd unhealthy, bailing"
                    exit 1
                  fi
                  # sort the list of members so that the leader is last in case of election when we hit that one
                  SORTED=$($ETCDCTL --endpoints=$ENDPOINTS endpoint status | sort -k6 | awk -F',' '{print $1}')
                  {{- if .Values.backup.enable }}
                  # back up the current leader and delete the oldest
                  echo;echo "-> Backing up"
                  $ETCDCTL --endpoints=${SORTED##*$'\n'} snapshot save /backup/snapshotdb-$(TZ={{ .Values.timezone }} date -Iminutes)-${NODE_IP} 2>/dev/null
                  echo;echo "-> Cleaning old backups"
                  find /backup -maxdepth 1 -mtime {{ .Values.backup.keepDays }} -type f -print -delete
                  {{- end }}
                  # finally defrag one by one, reporting before and after usage
                  for ENDPOINT in $SORTED
                  do
                    echo;echo "-> Defragmenting $ENDPOINT"
                    PRE=$($ETCDCTL --endpoints="$ENDPOINT" endpoint status | awk -F ',' '{print $4}')
                    $ETCDCTL --endpoints="$ENDPOINT" defrag
                    POST=$($ETCDCTL --endpoints="$ENDPOINT" endpoint status | awk -F ',' '{print $4}')
                    echo "defragged$PRE to$POST on $ENDPOINT"
                    # confirm health before moving to next or bail if not ready in $TRIES sec
                    echo;echo "-> Checking health of $ENDPOINT"
                    I=$TRIES
                    while [ $I -gt 0 ] && ! ($ETCDCTL --endpoints="$ENDPOINT" endpoint health 2>&1 | grep 'is healthy:')
                    do
                      I=$(( I - 1 ))
                      sleep 1
                    done
                    if [ $I -eq 0 ]
                    then
                      echo "FAILED! $ENDPOINT didnt become healthy in time, bailing"
                      exit 1
                    fi
                  done
              volumeMounts:
                - name: etcd-certs
                  mountPath: /etc/kubernetes/pki/etcd
                  readOnly: true
                {{- if .Values.backup.enable }}
                - name: etcd-defrag-backup
                  mountPath: /backup
                {{- end }}
          volumes:
            - name: etcd-certs
              hostPath:
                path: /etc/kubernetes/pki/etcd
            {{- if .Values.backup.enable }}
            - name: etcd-defrag-backup
              persistentVolumeClaim:
                {{- if .Values.backup.existingClaim }}
                claimName: {{ .Values.backup.existingClaim }}
                {{ else }}
                claimName: {{ .Release.Name }}-backup
                {{- end }}
            {{- end }}
